{"version":3,"file":"MockAnalyticsService.js","names":["MockAnalyticsService","httpClient","loggingService","jest","fn","hasIdentifyBeenCalled","logError","Promise","resolve","userId","Error","checkIdentifyCalled"],"sources":["../../src/analytics/MockAnalyticsService.js"],"sourcesContent":["/**\n * The MockAnalyticsService implements all functions of AnalyticsService as Jest mocks (jest.fn())).\n * It emulates the behavior of a real analytics service but witohut making any requests. It has no\n * other functionality.\n *\n * @implements {AnalyticsService}\n * @memberof module:Analytics\n */\nclass MockAnalyticsService {\n  static hasIdentifyBeenCalled = false;\n\n  constructor({ httpClient, loggingService }) {\n    this.loggingService = loggingService;\n    this.httpClient = httpClient;\n  }\n\n  checkIdentifyCalled = jest.fn(() => {\n    if (!this.hasIdentifyBeenCalled) {\n      this.loggingService.logError('Identify must be called before other tracking events.');\n    }\n  });\n\n  /**\n   * Returns a resolved promise.\n   *\n   * @returns {Promise} The promise returned by HttpClient.post.\n   */\n  sendTrackingLogEvent = jest.fn(() => Promise.resolve());\n\n  /**\n   * No-op, but records that identify has been called.\n   *\n   * @param {string} userId\n   * @throws {Error} If userId argument is not supplied.\n   */\n  identifyAuthenticatedUser = jest.fn((userId) => {\n    if (!userId) {\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\n    }\n    this.hasIdentifyBeenCalled = true;\n  });\n\n  /**\n   * No-op, but records that it has been called to prevent double-identification.\n   * @returns {Promise} A resolved promise.\n   */\n  identifyAnonymousUser = jest.fn(() => {\n    this.hasIdentifyBeenCalled = true;\n    return Promise.resolve();\n  });\n\n  /**\n   * Logs the event to the console.\n   *\n   * Checks whether identify has been called, logging an error to the logging service if not.\n   */\n  sendTrackEvent = jest.fn(() => {\n    this.checkIdentifyCalled();\n  });\n\n  /**\n   * Logs the event to the console.\n   *\n   * Checks whether identify has been called, logging an error to the logging service if not.\n   */\n  sendPageEvent = jest.fn(() => {\n    this.checkIdentifyCalled();\n  });\n}\n\nexport default MockAnalyticsService;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,oB,6BAGJ,oCAA4C;EAAA;;EAAA,IAA9BC,UAA8B,QAA9BA,UAA8B;EAAA,IAAlBC,cAAkB,QAAlBA,cAAkB;;EAAA;;EAAA,6CAKtBC,IAAI,CAACC,EAAL,CAAQ,YAAM;IAClC,IAAI,CAAC,KAAI,CAACC,qBAAV,EAAiC;MAC/B,KAAI,CAACH,cAAL,CAAoBI,QAApB,CAA6B,uDAA7B;IACD;EACF,CAJqB,CALsB;;EAAA,8CAgBrBH,IAAI,CAACC,EAAL,CAAQ;IAAA,OAAMG,OAAO,CAACC,OAAR,EAAN;EAAA,CAAR,CAhBqB;;EAAA,mDAwBhBL,IAAI,CAACC,EAAL,CAAQ,UAACK,MAAD,EAAY;IAC9C,IAAI,CAACA,MAAL,EAAa;MACX,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;IACD;;IACD,KAAI,CAACL,qBAAL,GAA6B,IAA7B;EACD,CAL2B,CAxBgB;;EAAA,+CAmCpBF,IAAI,CAACC,EAAL,CAAQ,YAAM;IACpC,KAAI,CAACC,qBAAL,GAA6B,IAA7B;IACA,OAAOE,OAAO,CAACC,OAAR,EAAP;EACD,CAHuB,CAnCoB;;EAAA,wCA6C3BL,IAAI,CAACC,EAAL,CAAQ,YAAM;IAC7B,KAAI,CAACO,mBAAL;EACD,CAFgB,CA7C2B;;EAAA,uCAsD5BR,IAAI,CAACC,EAAL,CAAQ,YAAM;IAC5B,KAAI,CAACO,mBAAL;EACD,CAFe,CAtD4B;;EAC1C,KAAKT,cAAL,GAAsBA,cAAtB;EACA,KAAKD,UAAL,GAAkBA,UAAlB;AACD,C;;gBANGD,oB,2BAC2B,K;;AA6DjC,eAAeA,oBAAf"}