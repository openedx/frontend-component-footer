{"version":3,"file":"SegmentAnalyticsService.js","names":["formurlencoded","snakeCaseObject","SegmentAnalyticsService","httpClient","loggingService","config","trackingLogApiUrl","LMS_BASE_URL","segmentKey","SEGMENT_KEY","hasIdentifyBeenCalled","segmentInitialized","initializeSegment","global","analytics","initialize","invoked","methods","factory","method","args","unshift","push","forEach","key","load","options","script","document","createElement","type","onerror","event","Event","dispatchEvent","async","src","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION","logError","eventName","properties","snakeEventData","deep","serverData","event_type","JSON","stringify","page","location","href","post","headers","error","userId","traits","Error","identify","Promise","resolve","reject","ready","user","id","reset","addEventListener","setTimeout","ga","create","google_tag_manager","checkIdentifyCalled","track","category","name"],"sources":["../../src/analytics/SegmentAnalyticsService.js"],"sourcesContent":["import formurlencoded from 'form-urlencoded';\nimport { snakeCaseObject } from '../utils';\n\n/**\n * @implements {AnalyticsService}\n * @memberof module:Analytics\n */\nclass SegmentAnalyticsService {\n  constructor({ httpClient, loggingService, config }) {\n    this.loggingService = loggingService;\n    this.httpClient = httpClient;\n    this.trackingLogApiUrl = `${config.LMS_BASE_URL}/event`;\n    this.segmentKey = config.SEGMENT_KEY;\n    this.hasIdentifyBeenCalled = false;\n    this.segmentInitialized = false;\n\n    if (this.segmentKey) {\n      this.initializeSegment();\n    }\n  }\n\n  // The code in this function is from Segment's website, with a few updates:\n  // - It uses the segmentKey from the SegmentAnalyticsService instance.\n  // - It also saves a \"segmentInitialized\" variable on the SegmentAnalyticsService instance so\n  //   that the service can keep track of its own initialization state.\n  // Reference:\n  // https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/quickstart/\n  initializeSegment() {\n    // Create a queue, but don't obliterate an existing one!\n    global.analytics = global.analytics || [];\n    const { analytics } = global;\n\n    // If the real analytics.js is already on the page return.\n    if (analytics.initialize) {\n      this.segmentInitialized = true;\n      return;\n    }\n\n    // If the snippet was invoked do nothing.\n    if (analytics.invoked) {\n      this.segmentInitialized = true;\n      return;\n    }\n\n    // Invoked flag, to make sure the snippet\n    // is never invoked twice.\n    analytics.invoked = true;\n\n    // A list of the methods in Analytics.js to stub.\n    analytics.methods = [\n      'trackSubmit',\n      'trackClick',\n      'trackLink',\n      'trackForm',\n      'pageview',\n      'identify',\n      'reset',\n      'group',\n      'track',\n      'ready',\n      'alias',\n      'debug',\n      'page',\n      'once',\n      'off',\n      'on',\n    ];\n\n    // Define a factory to create stubs. These are placeholders\n    // for methods in Analytics.js so that you never have to wait\n    // for it to load to actually record data. The `method` is\n    // stored as the first argument, so we can replay the data.\n    analytics.factory = method => ((...args) => {\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    });\n\n    // For each of our methods, generate a queueing stub.\n    analytics.methods.forEach((key) => {\n      analytics[key] = analytics.factory(key);\n    });\n\n    // Define a method to load Analytics.js from our CDN,\n    // and that will be sure to only ever load it once.\n    analytics.load = (key, options) => {\n      // Create an async script element based on your key.\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.onerror = () => {\n        this.segmentInitialized = false;\n        const event = new Event('segmentFailed');\n        document.dispatchEvent(event);\n      };\n      script.async = true;\n      script.src = `https://cdn.segment.com/analytics.js/v1/${key}/analytics.min.js`;\n\n      // Insert our script next to the first script element.\n      const first = document.getElementsByTagName('script')[0];\n      first.parentNode.insertBefore(script, first);\n      analytics._loadOptions = options; // eslint-disable-line no-underscore-dangle\n\n      this.segmentInitialized = true;\n    };\n\n    // Add a version to keep track of what's in the wild.\n    analytics.SNIPPET_VERSION = '4.1.0';\n\n    // Load Analytics.js with your key, which will automatically\n    // load the tools you've enabled for your account. Boosh!\n    analytics.load(this.segmentKey);\n  }\n\n  /**\n   * Checks that identify was first called.  Otherwise, logs error.\n   *\n   */\n  checkIdentifyCalled() {\n    if (!this.hasIdentifyBeenCalled) {\n      this.loggingService.logError('Identify must be called before other tracking events.');\n    }\n  }\n\n  /**\n   * Logs events to tracking log and downstream.\n   * For tracking log event documentation, see\n   * https://openedx.atlassian.net/wiki/spaces/AN/pages/13205895/Event+Design+and+Review+Process\n   *\n   * @param {string} eventName (event_type on backend, but named to match Segment api)\n   * @param {Object} properties (event on backend, but named properties to match Segment api)\n   * @returns {Promise} The promise returned by HttpClient.post.\n   */\n  sendTrackingLogEvent(eventName, properties) {\n    const snakeEventData = snakeCaseObject(properties, { deep: true });\n    const serverData = {\n      event_type: eventName,\n      event: JSON.stringify(snakeEventData),\n      page: global.location.href,\n    };\n    return this.httpClient.post(\n      this.trackingLogApiUrl,\n      formurlencoded(serverData),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      },\n    ).catch((error) => {\n      this.loggingService.logError(error);\n    });\n  }\n\n  /**\n   * * Send identify call to Segment.\n   *\n   * @param {string} userId\n   * @param {*} [traits]\n   */\n  identifyAuthenticatedUser(userId, traits) {\n    if (!userId) {\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\n    }\n\n    if (!this.segmentInitialized) {\n      return;\n    }\n    global.analytics.identify(userId, traits);\n    this.hasIdentifyBeenCalled = true;\n  }\n\n  /**\n   * Send anonymous identify call to Segment's identify.\n   *\n   * @param {*} [traits]\n   * @returns {Promise} Promise that will resolve once the document readyState is complete\n   */\n  identifyAnonymousUser(traits) {\n    if (!this.segmentInitialized) {\n      return Promise.resolve();\n    }\n    // if we do not have an authenticated user (indicated by being in this method),\n    // but we still have a user id associated in segment, reset the local segment state\n    // This has to be wrapped in the analytics.ready() callback because the analytics.user()\n    // function isn't available until the analytics.js package has finished initializing.\n    return new Promise((resolve, reject) => { // eslint-disable-line no-unused-vars\n      global.analytics.ready(() => {\n        if (global.analytics.user().id()) {\n          global.analytics.reset();\n        }\n        global.analytics.identify(traits);\n        this.hasIdentifyBeenCalled = true;\n        resolve();\n      });\n\n      // this is added to handle a specific use-case where if a user has blocked the analytics\n      // tools in their browser, this promise does not get resolved and user sees a blank\n      // page. Dispatching this event in script.onerror callback in analytics.load.\n      document.addEventListener('segmentFailed', resolve);\n      // This is added to handle the google analytics blocked case which is injected into\n      // the DOM by segment.min.js.\n      setTimeout(() => {\n        if (!global.ga || !global.ga.create || !global.google_tag_manager) {\n          this.segmentInitialized = false;\n          resolve();\n        }\n      }, 2000);\n    });\n  }\n\n  /**\n   * Sends a track event to Segment and downstream.\n   * Note: For links and forms, you should use trackLink and trackForm instead.\n   *\n   * @param {*} eventName\n   * @param {*} [properties]\n   */\n  sendTrackEvent(eventName, properties) {\n    if (!this.segmentInitialized) {\n      return;\n    }\n    this.checkIdentifyCalled();\n    global.analytics.track(eventName, properties);\n  }\n\n  /**\n   * Sends a page event to Segment and downstream.\n   *\n   * @param {*} [name] If only one string arg provided, assumed to be name.\n   * @param {*} [category] Name is required to pass a category.\n   * @param {*} [properties]\n   */\n  sendPageEvent(category, name, properties) {\n    if (!this.segmentInitialized) {\n      return;\n    }\n    this.checkIdentifyCalled();\n    global.analytics.page(category, name, properties);\n  }\n}\n\nexport default SegmentAnalyticsService;\n"],"mappings":"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"}