{"version":3,"file":"AxiosJwtAuthService.js","names":["axios","PropTypes","logFrontendAuthError","camelCaseObject","ensureDefinedConfig","createJwtTokenProviderInterceptor","createCsrfTokenProviderInterceptor","createProcessAxiosRequestErrorInterceptor","AxiosJwtTokenService","AxiosCsrfTokenService","configureCache","optionsPropTypes","config","shape","BASE_URL","string","isRequired","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","ACCESS_TOKEN_COOKIE_NAME","CSRF_TOKEN_API_PATH","loggingService","logError","func","logInfo","AxiosJwtAuthService","options","authenticatedHttpClient","httpClient","cachedAuthenticatedHttpClient","cachedHttpClient","authenticatedUser","checkPropTypes","jwtTokenService","csrfTokenService","addAuthenticationToHttpClient","create","then","cachedAxiosClient","e","message","middleware","applyMiddleware","clients","forEach","middlewareFn","client","error","useCache","redirectUrl","encodeURIComponent","global","location","assign","getLoginRedirectUrl","getLogoutRedirectUrl","authUser","getJwtToken","forceRefresh","decodedAccessToken","setAuthenticatedUser","email","userId","user_id","username","preferred_username","roles","administrator","name","getAuthenticatedUser","fetchAuthenticatedUser","isRedirectFromLoginPage","document","referrer","startsWith","redirectLoopError","Error","redirectToLogin","unauthorizedError","isRedirecting","user","get","response","data","newHttpClient","Object","defaults","withCredentials","refreshAccessTokenInterceptor","shouldSkip","axiosRequestConfig","isPublic","attachCsrfTokenInterceptor","method","isCsrfExempt","CSRF_PROTECTED_METHODS","includes","processAxiosRequestErrorInterceptor","interceptors","request","use"],"sources":["../../src/auth/AxiosJwtAuthService.js"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { logFrontendAuthError } from './utils';\nimport { camelCaseObject, ensureDefinedConfig } from '../utils';\nimport createJwtTokenProviderInterceptor from './interceptors/createJwtTokenProviderInterceptor';\nimport createCsrfTokenProviderInterceptor from './interceptors/createCsrfTokenProviderInterceptor';\nimport createProcessAxiosRequestErrorInterceptor from './interceptors/createProcessAxiosRequestErrorInterceptor';\nimport AxiosJwtTokenService from './AxiosJwtTokenService';\nimport AxiosCsrfTokenService from './AxiosCsrfTokenService';\nimport configureCache from './LocalForageCache';\n\nconst optionsPropTypes = {\n  config: PropTypes.shape({\n    BASE_URL: PropTypes.string.isRequired,\n    LMS_BASE_URL: PropTypes.string.isRequired,\n    LOGIN_URL: PropTypes.string.isRequired,\n    LOGOUT_URL: PropTypes.string.isRequired,\n    REFRESH_ACCESS_TOKEN_ENDPOINT: PropTypes.string.isRequired,\n    ACCESS_TOKEN_COOKIE_NAME: PropTypes.string.isRequired,\n    CSRF_TOKEN_API_PATH: PropTypes.string.isRequired,\n  }).isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\n/**\n * @implements {AuthService}\n * @memberof module:Auth\n */\nclass AxiosJwtAuthService {\n  /**\n   * @param {Object} options\n   * @param {Object} options.config\n   * @param {string} options.config.BASE_URL\n   * @param {string} options.config.LMS_BASE_URL\n   * @param {string} options.config.LOGIN_URL\n   * @param {string} options.config.LOGOUT_URL\n   * @param {string} options.config.REFRESH_ACCESS_TOKEN_ENDPOINT\n   * @param {string} options.config.ACCESS_TOKEN_COOKIE_NAME\n   * @param {string} options.config.CSRF_TOKEN_API_PATH\n   * @param {Object} options.loggingService requires logError and logInfo methods\n   */\n  constructor(options) {\n    this.authenticatedHttpClient = null;\n    this.httpClient = null;\n    this.cachedAuthenticatedHttpClient = null;\n    this.cachedHttpClient = null;\n    this.authenticatedUser = null;\n\n    ensureDefinedConfig(options, 'AuthService');\n    PropTypes.checkPropTypes(optionsPropTypes, options, 'options', 'AuthService');\n\n    this.config = options.config;\n    this.loggingService = options.loggingService;\n    this.jwtTokenService = new AxiosJwtTokenService(\n      this.loggingService,\n      this.config.ACCESS_TOKEN_COOKIE_NAME,\n      this.config.REFRESH_ACCESS_TOKEN_ENDPOINT,\n    );\n    this.csrfTokenService = new AxiosCsrfTokenService(this.config.CSRF_TOKEN_API_PATH);\n    this.authenticatedHttpClient = this.addAuthenticationToHttpClient(axios.create());\n    this.httpClient = axios.create();\n    configureCache()\n      .then((cachedAxiosClient) => {\n        this.cachedAuthenticatedHttpClient = this.addAuthenticationToHttpClient(cachedAxiosClient);\n        this.cachedHttpClient = cachedAxiosClient;\n      })\n      .catch((e) => {\n        // fallback to non-cached HTTP clients and log error\n        this.cachedAuthenticatedHttpClient = this.authenticatedHttpClient;\n        this.cachedHttpClient = this.httpClient;\n        logFrontendAuthError(this.loggingService, `configureCache failed with error: ${e.message}`);\n      });\n\n    this.middleware = options.middleware;\n    this.applyMiddleware(options.middleware);\n  }\n\n  /**\n   * Applies middleware to the axios instances in this service.\n   *\n   * @param {Array} middleware Middleware to apply.\n   */\n  applyMiddleware(middleware = []) {\n    const clients = [\n      this.authenticatedHttpClient, this.httpClient,\n      this.cachedAuthenticatedHttpClient, this.cachedHttpClient,\n    ];\n    try {\n      (middleware).forEach((middlewareFn) => {\n        clients.forEach((client) => client && middlewareFn(client));\n      });\n    } catch (error) {\n      logFrontendAuthError(this.loggingService, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the authenticated HTTP client for the service.  This is an axios instance.\n   *\n   * @param {Object} [options] Optional options for how the HTTP client should be configured.\n   * @param {boolean} [options.useCache] Whether to use front end caching for all requests made\n   * with the returned client.\n   *\n   * @returns {HttpClient} A configured axios http client which can be used for authenticated\n   * requests.\n   */\n  getAuthenticatedHttpClient(options = {}) {\n    if (options.useCache) {\n      return this.cachedAuthenticatedHttpClient;\n    }\n\n    return this.authenticatedHttpClient;\n  }\n\n  /**\n   * Gets the unauthenticated HTTP client for the service.  This is an axios instance.\n   *\n   * @param {Object} [options] Optional options for how the HTTP client should be configured.\n   * @param {boolean} [options.useCache] Whether to use front end caching for all requests made\n   * with the returned client.\n   * @returns {HttpClient} A configured axios http client.\n   */\n  getHttpClient(options = {}) {\n    if (options.useCache) {\n      return this.cachedHttpClient;\n    }\n\n    return this.httpClient;\n  }\n\n  /**\n   * Used primarily for testing.\n   *\n   * @ignore\n   */\n  getJwtTokenService() {\n    return this.jwtTokenService;\n  }\n\n  /**\n   * Used primarily for testing.\n   *\n   * @ignore\n   */\n  getCsrfTokenService() {\n    return this.csrfTokenService;\n  }\n\n  /**\n   * Builds a URL to the login page with a post-login redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLoginRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/login?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  getLoginRedirectUrl(redirectUrl = this.config.BASE_URL) {\n    return `${this.config.LOGIN_URL}?next=${encodeURIComponent(redirectUrl)}`;\n  }\n\n  /**\n   * Redirects the user to the login page.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n   */\n  redirectToLogin(redirectUrl = this.config.BASE_URL) {\n    global.location.assign(this.getLoginRedirectUrl(redirectUrl));\n  }\n\n  /**\n   * Builds a URL to the logout page with a post-logout redirect URL attached as a query parameter.\n   *\n   * ```\n   * const url = getLogoutRedirectUrl('http://localhost/mypage');\n   * console.log(url); // http://localhost/logout?next=http%3A%2F%2Flocalhost%2Fmypage\n   * ```\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  getLogoutRedirectUrl(redirectUrl = this.config.BASE_URL) {\n    return `${this.config.LOGOUT_URL}?redirect_url=${encodeURIComponent(redirectUrl)}`;\n  }\n\n  /**\n   * Redirects the user to the logout page.\n   *\n   * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n   */\n  redirectToLogout(redirectUrl = this.config.BASE_URL) {\n    global.location.assign(this.getLogoutRedirectUrl(redirectUrl));\n  }\n\n  /**\n   * If it exists, returns the user data representing the currently authenticated user. If the\n   * user is anonymous, returns null.\n   *\n   * @returns {UserData|null}\n   */\n  getAuthenticatedUser() {\n    return this.authenticatedUser;\n  }\n\n  /**\n   * Sets the authenticated user to the provided value.\n   *\n   * @param {UserData} authUser\n   */\n  setAuthenticatedUser(authUser) {\n    this.authenticatedUser = authUser;\n  }\n\n  /**\n   * Reads the authenticated user's access token. Resolves to null if the user is\n   * unauthenticated.\n   *\n   * @returns {Promise<UserData>|Promise<null>} Resolves to the user's access token if they are\n   * logged in.\n   */\n  async fetchAuthenticatedUser(options = {}) {\n    const decodedAccessToken = await this.jwtTokenService.getJwtToken(options.forceRefresh || false);\n\n    if (decodedAccessToken !== null) {\n      this.setAuthenticatedUser({\n        email: decodedAccessToken.email,\n        userId: decodedAccessToken.user_id,\n        username: decodedAccessToken.preferred_username,\n        roles: decodedAccessToken.roles || [],\n        administrator: decodedAccessToken.administrator,\n        name: decodedAccessToken.name,\n      });\n    } else {\n      this.setAuthenticatedUser(null);\n    }\n\n    return this.getAuthenticatedUser();\n  }\n\n  /**\n   * Ensures a user is authenticated. It will redirect to login when not\n   * authenticated.\n   *\n   * @param {string} [redirectUrl=config.BASE_URL] to return user after login when not\n   * authenticated.\n   * @returns {Promise<UserData>}\n   */\n  async ensureAuthenticatedUser(redirectUrl = this.config.BASE_URL) {\n    await this.fetchAuthenticatedUser();\n\n    if (this.getAuthenticatedUser() === null) {\n      const isRedirectFromLoginPage = global.document.referrer\n        && global.document.referrer.startsWith(this.config.LOGIN_URL);\n\n      if (isRedirectFromLoginPage) {\n        const redirectLoopError = new Error('Redirect from login page. Rejecting to avoid infinite redirect loop.');\n        logFrontendAuthError(this.loggingService, redirectLoopError);\n        throw redirectLoopError;\n      }\n\n      // The user is not authenticated, send them to the login page.\n      this.redirectToLogin(redirectUrl);\n\n      const unauthorizedError = new Error('Failed to ensure the user is authenticated');\n      unauthorizedError.isRedirecting = true;\n      throw unauthorizedError;\n    }\n\n    return this.getAuthenticatedUser();\n  }\n\n  /**\n   * Fetches additional user account information for the authenticated user and merges it into the\n   * existing authenticatedUser object, available via getAuthenticatedUser().\n   *\n   * ```\n   *  console.log(authenticatedUser); // Will be sparse and only contain basic information.\n   *  await hydrateAuthenticatedUser()\n   *  const authenticatedUser = getAuthenticatedUser();\n   *  console.log(authenticatedUser); // Will contain additional user information\n   * ```\n   *\n   * @returns {Promise<null>}\n   */\n  async hydrateAuthenticatedUser() {\n    const user = this.getAuthenticatedUser();\n    if (user !== null) {\n      const response = await this.authenticatedHttpClient\n        .get(`${this.config.LMS_BASE_URL}/api/user/v1/accounts/${user.username}`);\n      this.setAuthenticatedUser({ ...user, ...camelCaseObject(response.data) });\n    }\n  }\n\n  /**\n * Adds authentication defaults and interceptors to an HTTP client instance.\n *\n * @param {HttpClient} newHttpClient\n * @param {Object} config\n * @param {string} [config.REFRESH_ACCESS_TOKEN_ENDPOINT]\n * @param {string} [config.ACCESS_TOKEN_COOKIE_NAME]\n * @param {string} [config.CSRF_TOKEN_API_PATH]\n * @returns {HttpClient} A configured Axios HTTP client.\n */\n  addAuthenticationToHttpClient(newHttpClient) {\n    const httpClient = Object.create(newHttpClient);\n    // Set withCredentials to true. Enables cross-site Access-Control requests\n    // to be made using cookies, authorization headers or TLS client\n    // certificates. More on MDN:\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials\n    httpClient.defaults.withCredentials = true;\n\n    // Axios interceptors\n\n    // The JWT access token interceptor attempts to refresh the user's jwt token\n    // before any request unless the isPublic flag is set on the request config.\n    const refreshAccessTokenInterceptor = createJwtTokenProviderInterceptor({\n      jwtTokenService: this.jwtTokenService,\n      shouldSkip: axiosRequestConfig => axiosRequestConfig.isPublic,\n    });\n    // The CSRF token intercepter fetches and caches a csrf token for any post,\n    // put, patch, or delete request. That token is then added to the request\n    // headers.\n    const attachCsrfTokenInterceptor = createCsrfTokenProviderInterceptor({\n      csrfTokenService: this.csrfTokenService,\n      CSRF_TOKEN_API_PATH: this.config.CSRF_TOKEN_API_PATH,\n      shouldSkip: (axiosRequestConfig) => {\n        const { method, isCsrfExempt } = axiosRequestConfig;\n        const CSRF_PROTECTED_METHODS = ['post', 'put', 'patch', 'delete'];\n        return isCsrfExempt || !CSRF_PROTECTED_METHODS.includes(method);\n      },\n    });\n\n    const processAxiosRequestErrorInterceptor = createProcessAxiosRequestErrorInterceptor({\n      loggingService: this.loggingService,\n    });\n\n    // Request interceptors: Axios runs the interceptors in reverse order from\n    // how they are listed. After fetching csrf tokens no longer require jwt\n    // authentication, it won't matter which happens first. This change is\n    // coming soon in edx-platform. Nov. 2019\n    httpClient.interceptors.request.use(attachCsrfTokenInterceptor);\n    httpClient.interceptors.request.use(refreshAccessTokenInterceptor);\n\n    // Response interceptor: moves axios response error data into the error\n    // object at error.customAttributes\n    httpClient.interceptors.response.use(\n      response => response,\n      processAxiosRequestErrorInterceptor,\n    );\n\n    return httpClient;\n  }\n}\n\nexport default AxiosJwtAuthService;\n"],"mappings":"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"}