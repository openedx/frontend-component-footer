{"version":3,"file":"createProcessAxiosRequestErrorInterceptor.js","names":["processAxiosError","createProcessAxiosRequestErrorInterceptor","options","loggingService","interceptor","error","processedError","httpErrorStatus","customAttributes","logInfo","message","Promise","reject"],"sources":["../../../src/auth/interceptors/createProcessAxiosRequestErrorInterceptor.js"],"sourcesContent":["import { processAxiosError } from '../utils';\n\nconst createProcessAxiosRequestErrorInterceptor = (options) => {\n  const { loggingService } = options;\n\n  // Creating the interceptor inside this closure to\n  // maintain reference to the options supplied.\n  const interceptor = async (error) => {\n    const processedError = processAxiosError(error);\n    const { httpErrorStatus } = processedError.customAttributes;\n    if (httpErrorStatus === 401 || httpErrorStatus === 403) {\n      loggingService.logInfo(processedError.message, processedError.customAttributes);\n    }\n    return Promise.reject(processedError);\n  };\n\n  return interceptor;\n};\n\nexport default createProcessAxiosRequestErrorInterceptor;\n"],"mappings":";;;;AAAA,SAASA,iBAAT,QAAkC,UAAlC;;AAEA,IAAMC,yCAAyC,GAAG,SAA5CA,yCAA4C,CAACC,OAAD,EAAa;EAC7D,IAAQC,cAAR,GAA2BD,OAA3B,CAAQC,cAAR,CAD6D,CAG7D;EACA;;EACA,IAAMC,WAAW;IAAA,mEAAG,iBAAOC,KAAP;MAAA;MAAA;QAAA;UAAA;YAAA;cACZC,cADY,GACKN,iBAAiB,CAACK,KAAD,CADtB;cAEVE,eAFU,GAEUD,cAAc,CAACE,gBAFzB,CAEVD,eAFU;;cAGlB,IAAIA,eAAe,KAAK,GAApB,IAA2BA,eAAe,KAAK,GAAnD,EAAwD;gBACtDJ,cAAc,CAACM,OAAf,CAAuBH,cAAc,CAACI,OAAtC,EAA+CJ,cAAc,CAACE,gBAA9D;cACD;;cALiB,iCAMXG,OAAO,CAACC,MAAR,CAAeN,cAAf,CANW;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAXF,WAAW;MAAA;IAAA;EAAA,GAAjB;;EASA,OAAOA,WAAP;AACD,CAfD;;AAiBA,eAAeH,yCAAf"}