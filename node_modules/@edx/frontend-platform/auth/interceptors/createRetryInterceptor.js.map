{"version":3,"file":"createRetryInterceptor.js","names":["axios","defaultGetBackoffMilliseconds","nthRetry","maximumBackoffMilliseconds","exponentialBackoffSeconds","randomFractionOfASecond","Math","random","backoffSeconds","backoffMilliseconds","round","min","createRetryInterceptor","options","httpClient","create","getBackoffMilliseconds","shouldRetry","error","isRequestError","response","config","defaultMaxRetries","interceptor","Promise","reject","maxRetries","retryRequest","backoffDelay","resolve","setTimeout","request","retryResponse"],"sources":["../../../src/auth/interceptors/createRetryInterceptor.js"],"sourcesContent":["import axios from 'axios';\n\n// This default algorithm is a recreation of what is documented here\n// https://cloud.google.com/storage/docs/exponential-backoff\nconst defaultGetBackoffMilliseconds = (nthRetry, maximumBackoffMilliseconds = 16000) => {\n  // Retry at exponential intervals (2, 4, 8, 16...)\n  const exponentialBackoffSeconds = 2 ** nthRetry;\n  // Add some randomness to avoid sending retries from separate requests all at once\n  const randomFractionOfASecond = Math.random();\n  const backoffSeconds = exponentialBackoffSeconds + randomFractionOfASecond;\n  const backoffMilliseconds = Math.round(backoffSeconds * 1000);\n  return Math.min(backoffMilliseconds, maximumBackoffMilliseconds);\n};\n\nconst createRetryInterceptor = (options = {}) => {\n  const {\n    httpClient = axios.create(),\n    getBackoffMilliseconds = defaultGetBackoffMilliseconds,\n    // By default only retry outbound request failures (not responses)\n    shouldRetry = (error) => {\n      const isRequestError = !error.response && error.config;\n      return isRequestError;\n    },\n    // A per-request maxRetries can be specified in request config.\n    defaultMaxRetries = 2,\n  } = options;\n\n  const interceptor = async (error) => {\n    const { config } = error;\n\n    // If no config exists there was some other error setting up the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    if (!shouldRetry(error)) {\n      return Promise.reject(error);\n    }\n\n    const {\n      maxRetries = defaultMaxRetries,\n    } = config;\n\n    const retryRequest = async (nthRetry) => {\n      if (nthRetry > maxRetries) {\n        // Reject with the original error\n        return Promise.reject(error);\n      }\n\n      let retryResponse;\n\n      try {\n        const backoffDelay = getBackoffMilliseconds(nthRetry);\n        // Delay (wrapped in a promise so we can await the setTimeout)\n        await new Promise(resolve => setTimeout(resolve, backoffDelay));\n        // Make retry request\n        retryResponse = await httpClient.request(config);\n      } catch (e) {\n        return retryRequest(nthRetry + 1);\n      }\n\n      return retryResponse;\n    };\n\n    return retryRequest(1);\n  };\n\n  return interceptor;\n};\n\nexport default createRetryInterceptor;\nexport { defaultGetBackoffMilliseconds };\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACC,QAAD,EAAkD;EAAA,IAAvCC,0BAAuC,uEAAV,KAAU;EACtF;EACA,IAAMC,yBAAyB,YAAG,CAAH,EAAQF,QAAR,CAA/B,CAFsF,CAGtF;;EACA,IAAMG,uBAAuB,GAAGC,IAAI,CAACC,MAAL,EAAhC;EACA,IAAMC,cAAc,GAAGJ,yBAAyB,GAAGC,uBAAnD;EACA,IAAMI,mBAAmB,GAAGH,IAAI,CAACI,KAAL,CAAWF,cAAc,GAAG,IAA5B,CAA5B;EACA,OAAOF,IAAI,CAACK,GAAL,CAASF,mBAAT,EAA8BN,0BAA9B,CAAP;AACD,CARD;;AAUA,IAAMS,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAkB;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EAC/C,0BAUIA,OAVJ,CACEC,UADF;EAAA,IACEA,UADF,oCACed,KAAK,CAACe,MAAN,EADf;EAAA,4BAUIF,OAVJ,CAEEG,sBAFF;EAAA,IAEEA,sBAFF,sCAE2Bf,6BAF3B;EAAA,2BAUIY,OAVJ,CAIEI,WAJF;EAAA,IAIEA,WAJF,qCAIgB,UAACC,KAAD,EAAW;IACvB,IAAMC,cAAc,GAAG,CAACD,KAAK,CAACE,QAAP,IAAmBF,KAAK,CAACG,MAAhD;IACA,OAAOF,cAAP;EACD,CAPH;EAAA,4BAUIN,OAVJ,CASES,iBATF;EAAA,IASEA,iBATF,sCASsB,CATtB;;EAYA,IAAMC,WAAW;IAAA,mEAAG,kBAAOL,KAAP;MAAA;;MAAA;QAAA;UAAA;YAAA;cACVG,MADU,GACCH,KADD,CACVG,MADU,EAGlB;;cAHkB,IAIbA,MAJa;gBAAA;gBAAA;cAAA;;cAAA,kCAKTG,OAAO,CAACC,MAAR,CAAeP,KAAf,CALS;;YAAA;cAAA,IAQbD,WAAW,CAACC,KAAD,CARE;gBAAA;gBAAA;cAAA;;cAAA,kCASTM,OAAO,CAACC,MAAR,CAAeP,KAAf,CATS;;YAAA;cAAA,qBAcdG,MAdc,CAahBK,UAbgB,EAahBA,UAbgB,mCAaHJ,iBAbG;;cAgBZK,YAhBY;gBAAA,oEAgBG,iBAAOzB,QAAP;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,MACfA,QAAQ,GAAGwB,UADI;4BAAA;4BAAA;0BAAA;;0BAAA,iCAGVF,OAAO,CAACC,MAAR,CAAeP,KAAf,CAHU;;wBAAA;0BAAA;0BASXU,YATW,GASIZ,sBAAsB,CAACd,QAAD,CAT1B,EAUjB;;0BAViB;0BAAA,OAWX,IAAIsB,OAAJ,CAAY,UAAAK,OAAO;4BAAA,OAAIC,UAAU,CAACD,OAAD,EAAUD,YAAV,CAAd;0BAAA,CAAnB,CAXW;;wBAAA;0BAAA;0BAAA,OAaKd,UAAU,CAACiB,OAAX,CAAmBV,MAAnB,CAbL;;wBAAA;0BAajBW,aAbiB;0BAAA;0BAAA;;wBAAA;0BAAA;0BAAA;0BAAA,iCAeVL,YAAY,CAACzB,QAAQ,GAAG,CAAZ,CAfF;;wBAAA;0BAAA,iCAkBZ8B,aAlBY;;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAhBH;;gBAAA,gBAgBZL,YAhBY;kBAAA;gBAAA;cAAA;;cAAA,kCAqCXA,YAAY,CAAC,CAAD,CArCD;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAXJ,WAAW;MAAA;IAAA;EAAA,GAAjB;;EAwCA,OAAOA,WAAP;AACD,CAtDD;;AAwDA,eAAeX,sBAAf;AACA,SAASX,6BAAT"}