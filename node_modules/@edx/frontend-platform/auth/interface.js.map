{"version":3,"file":"interface.js","names":["PropTypes","publish","AUTHENTICATED_USER_TOPIC","AUTHENTICATED_USER_CHANGED","optionsShape","config","shape","BASE_URL","string","isRequired","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","ACCESS_TOKEN_COOKIE_NAME","CSRF_TOKEN_API_PATH","loggingService","logError","func","logInfo","serviceShape","getAuthenticatedHttpClient","getHttpClient","getLoginRedirectUrl","redirectToLogin","getLogoutRedirectUrl","redirectToLogout","getAuthenticatedUser","setAuthenticatedUser","fetchAuthenticatedUser","ensureAuthenticatedUser","hydrateAuthenticatedUser","service","configure","AuthService","options","checkPropTypes","getAuthService","Error","resetAuthService","redirectUrl","authUser"],"sources":["../../src/auth/interface.js"],"sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform/auth**\n *\n * Simplifies the process of making authenticated API requests to backend edX services by providing\n * common authN/authZ client code that enables the login/logout flow and handles ensuring the\n * presence of a valid [JWT cookie](https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0009-jwt-in-session-cookie.rst).\n *\n * The `initialize` function performs much of the auth configuration for you.  If, however, you're\n * not using the `initialize` function, an authenticated API client can be created via:\n *\n * ```\n * import {\n *   configure,\n *   fetchAuthenticatedUser,\n *   getAuthenticatedHttpClient\n * } from '@edx/frontend-platform/auth';\n * import { getConfig } from '@edx/frontend-platform';\n * import { getLoggingService } from '@edx/frontend-platform/logging';\n *\n * configure({\n *   loggingService: getLoggingService(),\n *   config: getConfig(),\n * });\n *\n * const authenticatedUser = await fetchAuthenticatedUser(); // validates and decodes JWT token\n * const authenticatedHttpClient = getAuthenticatedHttpClient();\n * const response = await getAuthenticatedHttpClient().get(`https://example.com/api/user/data/${authenticatedUser.username}`); // fetching from an authenticated API using user data\n * ```\n *\n * As shown in this example, auth depends on the configuration document and logging.\n *\n * NOTE: The documentation for AxiosJwtAuthService is nearly the same as that for the top-level\n * auth interface, except that it contains some Axios-specific details.\n *\n * @module Auth\n */\nimport PropTypes from 'prop-types';\nimport { publish } from '../pubSub';\n\n/**\n * @constant\n * @private\n */\nexport const AUTHENTICATED_USER_TOPIC = 'AUTHENTICATED_USER';\n\n/**\n * Published when the authenticated user data changes.  This can happen when the authentication\n * service determines that the user is authenticated or anonymous, as well as when we fetch\n * additional user account data if the `hydrateAuthenticatedUser` flag has been set in the\n * `initialize` function.\n *\n * @event\n * @see {@link module:Initialization~initialize}\n */\nexport const AUTHENTICATED_USER_CHANGED = `${AUTHENTICATED_USER_TOPIC}.CHANGED`;\n\nconst optionsShape = {\n  config: PropTypes.shape({\n    BASE_URL: PropTypes.string.isRequired,\n    LMS_BASE_URL: PropTypes.string.isRequired,\n    LOGIN_URL: PropTypes.string.isRequired,\n    LOGOUT_URL: PropTypes.string.isRequired,\n    REFRESH_ACCESS_TOKEN_ENDPOINT: PropTypes.string.isRequired,\n    ACCESS_TOKEN_COOKIE_NAME: PropTypes.string.isRequired,\n    CSRF_TOKEN_API_PATH: PropTypes.string.isRequired,\n  }).isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst serviceShape = {\n  getAuthenticatedHttpClient: PropTypes.func.isRequired,\n  getHttpClient: PropTypes.func.isRequired,\n  getLoginRedirectUrl: PropTypes.func.isRequired,\n  redirectToLogin: PropTypes.func.isRequired,\n  getLogoutRedirectUrl: PropTypes.func.isRequired,\n  redirectToLogout: PropTypes.func.isRequired,\n  getAuthenticatedUser: PropTypes.func.isRequired,\n  setAuthenticatedUser: PropTypes.func.isRequired,\n  fetchAuthenticatedUser: PropTypes.func.isRequired,\n  ensureAuthenticatedUser: PropTypes.func.isRequired,\n  hydrateAuthenticatedUser: PropTypes.func.isRequired,\n};\n\nlet service;\n\n/**\n *\n * @param {class} AuthService\n * @param {*} options\n * @returns {AuthService}\n */\nexport function configure(AuthService, options) {\n  PropTypes.checkPropTypes(optionsShape, options, 'property', 'Auth');\n  service = new AuthService(options);\n  PropTypes.checkPropTypes(serviceShape, service, 'property', 'AuthService');\n  return service;\n}\n\n/**\n *\n *\n * @returns {AuthService}\n */\nexport function getAuthService() {\n  if (!service) {\n    throw Error('You must first configure the auth service.');\n  }\n\n  return service;\n}\n\n/**\n *\n */\nexport function resetAuthService() {\n  service = null;\n}\n\n/**\n * Gets the authenticated HTTP client for the service.\n *\n * @param {Object} [options] Optional options for how to configure the authenticated HTTP client\n * @param {boolean} [options.useCache] Whether to use front end caching for all requests made with the returned client\n *\n * @returns {HttpClient}\n */\nexport function getAuthenticatedHttpClient(options = {}) {\n  return service.getAuthenticatedHttpClient(options);\n}\n\n/**\n * Gets the unauthenticated HTTP client for the service.\n *\n * @param {Object} [options] Optional options for how to configure the authenticated HTTP client\n * @param {boolean} [options.useCache] Whether to use front end caching for all requests made with the returned client\n *\n * @returns {HttpClient}\n */\nexport function getHttpClient(options = {}) {\n  return service.getHttpClient(options);\n}\n\n/**\n * Builds a URL to the login page with a post-login redirect URL attached as a query parameter.\n *\n * ```\n * const url = getLoginRedirectUrl('http://localhost/mypage');\n * console.log(url); // http://localhost/login?next=http%3A%2F%2Flocalhost%2Fmypage\n * ```\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n */\nexport function getLoginRedirectUrl(redirectUrl) {\n  return service.getLoginRedirectUrl(redirectUrl);\n}\n\n/**\n * Redirects the user to the login page.\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging in.\n */\nexport function redirectToLogin(redirectUrl) {\n  return service.redirectToLogin(redirectUrl);\n}\n\n/**\n * Builds a URL to the logout page with a post-logout redirect URL attached as a query parameter.\n *\n * ```\n * const url = getLogoutRedirectUrl('http://localhost/mypage');\n * console.log(url); // http://localhost/logout?redirect_url=http%3A%2F%2Flocalhost%2Fmypage\n * ```\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n */\nexport function getLogoutRedirectUrl(redirectUrl) {\n  return service.getLogoutRedirectUrl(redirectUrl);\n}\n\n/**\n * Redirects the user to the logout page.\n *\n * @param {string} redirectUrl The URL the user should be redirected to after logging out.\n */\nexport function redirectToLogout(redirectUrl) {\n  return service.redirectToLogout(redirectUrl);\n}\n\n/**\n * If it exists, returns the user data representing the currently authenticated user. If the\n * user is anonymous, returns null.\n *\n * @returns {UserData|null}\n */\nexport function getAuthenticatedUser() {\n  return service.getAuthenticatedUser();\n}\n\n/**\n * Sets the authenticated user to the provided value.\n *\n * @param {UserData} authUser\n * @emits AUTHENTICATED_USER_CHANGED\n */\nexport function setAuthenticatedUser(authUser) {\n  service.setAuthenticatedUser(authUser);\n  publish(AUTHENTICATED_USER_CHANGED);\n}\n\n/**\n * Reads the authenticated user's access token. Resolves to null if the user is\n * unauthenticated.\n *\n * @returns {Promise<UserData>|Promise<null>} Resolves to the user's access token if they are\n * logged in.\n */\nexport async function fetchAuthenticatedUser(options = {}) {\n  return service.fetchAuthenticatedUser(options);\n}\n\n/**\n * Ensures a user is authenticated. It will redirect to login when not\n * authenticated.\n *\n * @param {string} [redirectUrl=config.BASE_URL] to return user after login when not\n * authenticated.\n * @returns {Promise<UserData>}\n */\nexport async function ensureAuthenticatedUser(redirectUrl) {\n  return service.ensureAuthenticatedUser(redirectUrl);\n}\n\n/**\n * Fetches additional user account information for the authenticated user and merges it into the\n * existing authenticatedUser object, available via getAuthenticatedUser().\n *\n * ```\n *  console.log(authenticatedUser); // Will be sparse and only contain basic information.\n *  await hydrateAuthenticatedUser()\n *  const authenticatedUser = getAuthenticatedUser();\n *  console.log(authenticatedUser); // Will contain additional user information\n * ```\n *\n * @emits AUTHENTICATED_USER_CHANGED\n */\nexport async function hydrateAuthenticatedUser() {\n  await service.hydrateAuthenticatedUser();\n  publish(AUTHENTICATED_USER_CHANGED);\n}\n\n/**\n * @name AuthService\n * @interface\n * @memberof module:Auth\n * @property {function} getAuthenticatedHttpClient\n * @property {function} getHttpClient\n * @property {function} getLoginRedirectUrl\n * @property {function} redirectToLogin\n * @property {function} getLogoutRedirectUrl\n * @property {function} redirectToLogout\n * @property {function} getAuthenticatedUser\n * @property {function} setAuthenticatedUser\n * @property {function} fetchAuthenticatedUser\n * @property {function} ensureAuthenticatedUser\n * @property {function} hydrateAuthenticatedUser\n */\n\n/**\n * A configured axios client. See axios docs for more\n * info https://github.com/axios/axios. All the functions\n * below accept isPublic and isCsrfExempt in the request\n * config options. Setting these to true will prevent this\n * client from attempting to refresh the jwt access token\n * or a csrf token respectively.\n *\n * ```\n *  // A public endpoint (no jwt token refresh)\n *  apiClient.get('/path/to/endpoint', { isPublic: true });\n * ```\n *\n * ```\n *  // A csrf exempt endpoint\n *  apiClient.post('/path/to/endpoint', { data }, { isCsrfExempt: true });\n * ```\n *\n * @name HttpClient\n * @interface\n * @memberof module:Auth\n * @property {function} get\n * @property {function} head\n * @property {function} options\n * @property {function} delete (csrf protected)\n * @property {function} post (csrf protected)\n * @property {function} put (csrf protected)\n * @property {function} patch (csrf protected)\n */\n\n/**\n * @name UserData\n * @interface\n * @memberof module:Auth\n * @property {string} userId\n * @property {string} username\n * @property {Array} roles\n * @property {boolean} administrator\n */\n"],"mappings":"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"}