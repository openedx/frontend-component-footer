{"version":3,"file":"transifex-utils.js","names":["fs","require","glob","path","gatherJson","dir","ret","files","sync","forEach","filename","messages","JSON","parse","readFileSync","push","escapeDots","messageId","replace","jsonDir","process","argv","messageObjects","length","exitCode","Error","loggingPrefix","basename","__filename","bashScriptsPath","hashFile","stdout","write","messageInfo","outputFile","writeFileSync","message","transifexFormatId","id","info","find","mi","key","appendFileSync","string_hash","description","output","defaultMessage","stringify"],"sources":["../../../src/i18n/scripts/transifex-utils.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst fs = require('fs');\nconst glob = require('glob');\nconst path = require('path');\n\n/*\n * See the Makefile for how the required hash file is downloaded from Transifex.\n */\n\n/*\n * Expected input: a directory, possibly containing subdirectories, with .json files.  Each .json\n * file is an array of translation triplets (id, description, defaultMessage).\n *\n *\n */\nfunction gatherJson(dir) {\n  const ret = [];\n  const files = glob.sync(`${dir}/**/*.json`);\n\n  files.forEach((filename) => {\n    const messages = JSON.parse(fs.readFileSync(filename));\n    ret.push(...messages);\n  });\n  return ret;\n}\n\n// the hash file returns ids whose periods are \"escaped\" (sort of), like this:\n// \"key\": \"profile\\\\.sociallinks\\\\.social\\\\.links\"\n// so our regular messageIds won't match them out of the box\nfunction escapeDots(messageId) {\n  return messageId.replace(/\\./g, '\\\\.');\n}\n\nconst jsonDir = process.argv[2];\nconst messageObjects = gatherJson(jsonDir);\n\nif (messageObjects.length === 0) {\n  process.exitCode = 1;\n  throw new Error('Found no messages');\n}\n\nif (process.argv[3] === '--comments') { // prepare to handle the translator notes\n  const loggingPrefix = path.basename(`${__filename}`); // the name of this JS file\n  const bashScriptsPath = (\n    process.argv[4] && process.argv[4] === '--v3-scripts-path'\n      ? './node_modules/@edx/reactifex/bash_scripts'\n      : './node_modules/reactifex/bash_scripts');\n\n  const hashFile = `${bashScriptsPath}/hashmap.json`;\n  process.stdout.write(`${loggingPrefix}: reading hash file ${hashFile}\\n`);\n  const messageInfo = JSON.parse(fs.readFileSync(hashFile));\n\n  const outputFile = `${bashScriptsPath}/hashed_data.txt`;\n  process.stdout.write(`${loggingPrefix}: writing to output file ${outputFile}\\n`);\n  fs.writeFileSync(outputFile, '');\n\n  messageObjects.forEach((message) => {\n    const transifexFormatId = escapeDots(message.id);\n\n    const info = messageInfo.find(mi => mi.key === transifexFormatId);\n    if (info) {\n      fs.appendFileSync(outputFile, `${info.string_hash}|${message.description}\\n`);\n    } else {\n      process.stdout.write(`${loggingPrefix}: string ${message.id} does not yet exist on transifex!\\n`);\n    }\n  });\n} else {\n  const output = {};\n\n  messageObjects.forEach((message) => {\n    output[message.id] = message.defaultMessage;\n  });\n  fs.writeFileSync(process.argv[3], JSON.stringify(output, null, 2));\n}\n"],"mappings":"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"}