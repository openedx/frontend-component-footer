{"version":3,"file":"ControlledSelectHeader.js","names":["React","useContext","useMemo","useCallback","PropTypes","CheckboxControl","DataTableContext","clearPageSelectionAction","setSelectedRowsAction","ControlledSelectHeader","rows","itemCount","controlledTableSelections","dispatch","getToggleAllPageRowsSelectedProps","selectedRowIds","state","isAllPageRowsSelected","selectedPageRowIds","Object","keys","toggleAllPageRowsSelected","toggleAllPageRowsSelectedProps","isIndeterminate","indeterminate","propTypes","arrayOf","shape","id","oneOfType","string","number","isRequired"],"sources":["../../../src/DataTable/selection/ControlledSelectHeader.jsx"],"sourcesContent":["import React, { useContext, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CheckboxControl } from '../../Form';\nimport DataTableContext from '../DataTableContext';\n\nimport {\n  clearPageSelectionAction,\n  setSelectedRowsAction,\n} from './data/actions';\n\nconst ControlledSelectHeader = ({ rows }) => {\n  const {\n    itemCount,\n    controlledTableSelections: [, dispatch],\n    getToggleAllPageRowsSelectedProps,\n    state: { selectedRowIds },\n    isAllPageRowsSelected,\n  } = useContext(DataTableContext);\n\n  const selectedPageRowIds = useMemo(\n    () => Object.keys(selectedRowIds),\n    [selectedRowIds],\n  );\n\n  const toggleAllPageRowsSelected = useCallback(\n    () => {\n      if (isAllPageRowsSelected) {\n        dispatch(clearPageSelectionAction(selectedPageRowIds));\n      } else {\n        dispatch(setSelectedRowsAction(rows, itemCount));\n      }\n    },\n    [rows, selectedPageRowIds, isAllPageRowsSelected, dispatch, itemCount],\n  );\n\n  const toggleAllPageRowsSelectedProps = getToggleAllPageRowsSelectedProps();\n  toggleAllPageRowsSelectedProps.isIndeterminate = toggleAllPageRowsSelectedProps.indeterminate;\n  // delete unused ``indeterminate`` prop\n  delete toggleAllPageRowsSelectedProps.indeterminate;\n\n  return (\n    <div className=\"d-flex align-content-center p-1\">\n      <CheckboxControl\n        {...toggleAllPageRowsSelectedProps}\n        onChange={toggleAllPageRowsSelected}\n      />\n    </div>\n  );\n};\n\nControlledSelectHeader.propTypes = {\n  rows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  })).isRequired,\n};\n\nexport default ControlledSelectHeader;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,SACEC,wBADF,EAEEC,qBAFF,QAGO,gBAHP;;AAKA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAc;EAAA,IAAXC,IAAW,QAAXA,IAAW;;EAC3C,kBAMIT,UAAU,CAACK,gBAAD,CANd;EAAA,IACEK,SADF,eACEA,SADF;EAAA,uDAEEC,yBAFF;EAAA,IAEgCC,QAFhC;EAAA,IAGEC,iCAHF,eAGEA,iCAHF;EAAA,IAIWC,cAJX,eAIEC,KAJF,CAIWD,cAJX;EAAA,IAKEE,qBALF,eAKEA,qBALF;;EAQA,IAAMC,kBAAkB,GAAGhB,OAAO,CAChC;IAAA,OAAMiB,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAN;EAAA,CADgC,EAEhC,CAACA,cAAD,CAFgC,CAAlC;EAKA,IAAMM,yBAAyB,GAAGlB,WAAW,CAC3C,YAAM;IACJ,IAAIc,qBAAJ,EAA2B;MACzBJ,QAAQ,CAACN,wBAAwB,CAACW,kBAAD,CAAzB,CAAR;IACD,CAFD,MAEO;MACLL,QAAQ,CAACL,qBAAqB,CAACE,IAAD,EAAOC,SAAP,CAAtB,CAAR;IACD;EACF,CAP0C,EAQ3C,CAACD,IAAD,EAAOQ,kBAAP,EAA2BD,qBAA3B,EAAkDJ,QAAlD,EAA4DF,SAA5D,CAR2C,CAA7C;EAWA,IAAMW,8BAA8B,GAAGR,iCAAiC,EAAxE;EACAQ,8BAA8B,CAACC,eAA/B,GAAiDD,8BAA8B,CAACE,aAAhF,CA1B2C,CA2B3C;;EACA,OAAOF,8BAA8B,CAACE,aAAtC;EAEA,oBACE;IAAK,SAAS,EAAC;EAAf,gBACE,oBAAC,eAAD,eACMF,8BADN;IAEE,QAAQ,EAAED;EAFZ,GADF,CADF;AAQD,CAtCD;;AAwCAZ,sBAAsB,CAACgB,SAAvB,GAAmC;EACjCf,IAAI,EAAEN,SAAS,CAACsB,OAAV,CAAkBtB,SAAS,CAACuB,KAAV,CAAgB;IACtCC,EAAE,EAAExB,SAAS,CAACyB,SAAV,CAAoB,CAACzB,SAAS,CAAC0B,MAAX,EAAmB1B,SAAS,CAAC2B,MAA7B,CAApB,EAA0DC;EADxB,CAAhB,CAAlB,EAEFA;AAH6B,CAAnC;AAMA,eAAevB,sBAAf"}