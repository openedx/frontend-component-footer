{"version":3,"file":"hooks.test.js","names":["useSelectionActions","mockToggleAllRowsSelected","jest","fn","mockInstanceDispatcher","controlledTableSelectionsGenerator","selectedRows","isEntireTableSelected","describe","afterEach","clearAllMocks","it","toggleAllRowsSelected","clearSelection","expect","mock","calls","length","toBe"],"sources":["../../../src/DataTable/tests/hooks.test.js"],"sourcesContent":["import { useSelectionActions } from '../hooks';\n\nconst mockToggleAllRowsSelected = jest.fn();\nconst mockInstanceDispatcher = jest.fn();\n\nconst controlledTableSelectionsGenerator = (selectedRows = [], isEntireTableSelected = false) => ([\n  { selectedRows, isEntireTableSelected },\n  mockInstanceDispatcher,\n]);\n\ndescribe('hooks', () => {\n  describe('useSelectionActions', () => {\n    afterEach(() => {\n      jest.clearAllMocks();\n    });\n    it('calls toggleAllRowsSelected when controlled selection is empty', () => {\n      const { clearSelection } = useSelectionActions(\n        { toggleAllRowsSelected: mockToggleAllRowsSelected },\n        controlledTableSelectionsGenerator([], false),\n      );\n      clearSelection();\n      expect(mockToggleAllRowsSelected.mock.calls.length).toBe(1);\n      expect(mockInstanceDispatcher.mock.calls.length).toBe(0);\n    });\n    it('calls dispatcher when all rows selected flagged', () => {\n      const { clearSelection } = useSelectionActions(\n        { toggleAllRowsSelected: mockToggleAllRowsSelected },\n        controlledTableSelectionsGenerator([], true),\n      );\n      clearSelection();\n      expect(mockToggleAllRowsSelected.mock.calls.length).toBe(0);\n      expect(mockInstanceDispatcher.mock.calls.length).toBe(1);\n    });\n    it('calls dispatcher when some row is selected', () => {\n      const { clearSelection } = useSelectionActions(\n        { toggleAllRowsSelected: mockToggleAllRowsSelected },\n        controlledTableSelectionsGenerator(['row'], true),\n      );\n      clearSelection();\n      expect(mockToggleAllRowsSelected.mock.calls.length).toBe(0);\n      expect(mockInstanceDispatcher.mock.calls.length).toBe(1);\n    });\n  });\n});\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,UAApC;AAEA,IAAMC,yBAAyB,GAAGC,IAAI,CAACC,EAAL,EAAlC;AACA,IAAMC,sBAAsB,GAAGF,IAAI,CAACC,EAAL,EAA/B;;AAEA,IAAME,kCAAkC,GAAG,SAArCA,kCAAqC;EAAA,IAACC,YAAD,uEAAgB,EAAhB;EAAA,IAAoBC,qBAApB,uEAA4C,KAA5C;EAAA,OAAuD,CAChG;IAAED,YAAY,EAAZA,YAAF;IAAgBC,qBAAqB,EAArBA;EAAhB,CADgG,EAEhGH,sBAFgG,CAAvD;AAAA,CAA3C;;AAKAI,QAAQ,CAAC,OAAD,EAAU,YAAM;EACtBA,QAAQ,CAAC,qBAAD,EAAwB,YAAM;IACpCC,SAAS,CAAC,YAAM;MACdP,IAAI,CAACQ,aAAL;IACD,CAFQ,CAAT;IAGAC,EAAE,CAAC,gEAAD,EAAmE,YAAM;MACzE,2BAA2BX,mBAAmB,CAC5C;QAAEY,qBAAqB,EAAEX;MAAzB,CAD4C,EAE5CI,kCAAkC,CAAC,EAAD,EAAK,KAAL,CAFU,CAA9C;MAAA,IAAQQ,cAAR,wBAAQA,cAAR;;MAIAA,cAAc;MACdC,MAAM,CAACb,yBAAyB,CAACc,IAA1B,CAA+BC,KAA/B,CAAqCC,MAAtC,CAAN,CAAoDC,IAApD,CAAyD,CAAzD;MACAJ,MAAM,CAACV,sBAAsB,CAACW,IAAvB,CAA4BC,KAA5B,CAAkCC,MAAnC,CAAN,CAAiDC,IAAjD,CAAsD,CAAtD;IACD,CARC,CAAF;IASAP,EAAE,CAAC,iDAAD,EAAoD,YAAM;MAC1D,4BAA2BX,mBAAmB,CAC5C;QAAEY,qBAAqB,EAAEX;MAAzB,CAD4C,EAE5CI,kCAAkC,CAAC,EAAD,EAAK,IAAL,CAFU,CAA9C;MAAA,IAAQQ,cAAR,yBAAQA,cAAR;;MAIAA,cAAc;MACdC,MAAM,CAACb,yBAAyB,CAACc,IAA1B,CAA+BC,KAA/B,CAAqCC,MAAtC,CAAN,CAAoDC,IAApD,CAAyD,CAAzD;MACAJ,MAAM,CAACV,sBAAsB,CAACW,IAAvB,CAA4BC,KAA5B,CAAkCC,MAAnC,CAAN,CAAiDC,IAAjD,CAAsD,CAAtD;IACD,CARC,CAAF;IASAP,EAAE,CAAC,4CAAD,EAA+C,YAAM;MACrD,4BAA2BX,mBAAmB,CAC5C;QAAEY,qBAAqB,EAAEX;MAAzB,CAD4C,EAE5CI,kCAAkC,CAAC,CAAC,KAAD,CAAD,EAAU,IAAV,CAFU,CAA9C;MAAA,IAAQQ,cAAR,yBAAQA,cAAR;;MAIAA,cAAc;MACdC,MAAM,CAACb,yBAAyB,CAACc,IAA1B,CAA+BC,KAA/B,CAAqCC,MAAtC,CAAN,CAAoDC,IAApD,CAAyD,CAAzD;MACAJ,MAAM,CAACV,sBAAsB,CAACW,IAAvB,CAA4BC,KAA5B,CAAkCC,MAAnC,CAAN,CAAiDC,IAAjD,CAAsD,CAAtD;IACD,CARC,CAAF;EASD,CA/BO,CAAR;AAgCD,CAjCO,CAAR"}