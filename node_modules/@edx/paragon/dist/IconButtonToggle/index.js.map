{"version":3,"file":"index.js","names":["React","useMemo","PropTypes","IconButtonToggle","activeValue","onChange","children","iconButtons","Children","map","iconButton","isActive","props","value","cloneElement","onClick","defaultProps","undefined","propTypes","string","func","node","isRequired"],"sources":["../../src/IconButtonToggle/index.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n *\n * @param {object} args arguments\n * @param {boolean} args.activeValue the current value of the active/selected iconButton.\n *                                   if not provided, none of the iconButtons will initially be active\n * @param {Function} args.onChange callback to call when toggle value changes.\n *                                 Receives value of the selected toggle button.\n * @param {Array<IconButton>} args.children children components expected to be IconButton\n * @returns {React.Component} A React component\n */\nconst IconButtonToggle = ({ activeValue, onChange, children }) => {\n  const iconButtons = useMemo(\n    () => React.Children.map(children, iconButton => {\n      const isActive = iconButton.props.value === activeValue;\n      return React.cloneElement(iconButton, {\n        onClick: () => { onChange(iconButton.props.value); },\n        isActive,\n        'aria-selected': isActive,\n        'data-testid': `icon-btn-val-${iconButton.props.value}`,\n      });\n    }),\n    [children, activeValue, onChange],\n  );\n  return <div className=\"pgn__icon-button-toggle__container\">{iconButtons}</div>;\n};\n\nIconButtonToggle.defaultProps = {\n  onChange: () => {},\n  activeValue: undefined,\n};\n\nIconButtonToggle.propTypes = {\n  /** value to use to check which button to set to active */\n  activeValue: PropTypes.string,\n  /** handler that is passed the currently active button's value when a button is selected */\n  onChange: PropTypes.func,\n  /** child nodes of type `IconButton` (or its subcomponents) to be rendered within toggle group */\n  children: PropTypes.node.isRequired,\n};\n\nexport default IconButtonToggle;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAyC;EAAA,IAAtCC,WAAsC,QAAtCA,WAAsC;EAAA,IAAzBC,QAAyB,QAAzBA,QAAyB;EAAA,IAAfC,QAAe,QAAfA,QAAe;EAChE,IAAMC,WAAW,GAAGN,OAAO,CACzB;IAAA,OAAMD,KAAK,CAACQ,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,UAAAI,UAAU,EAAI;MAC/C,IAAMC,QAAQ,GAAGD,UAAU,CAACE,KAAX,CAAiBC,KAAjB,KAA2BT,WAA5C;MACA,oBAAOJ,KAAK,CAACc,YAAN,CAAmBJ,UAAnB,EAA+B;QACpCK,OAAO,EAAE,mBAAM;UAAEV,QAAQ,CAACK,UAAU,CAACE,KAAX,CAAiBC,KAAlB,CAAR;QAAmC,CADhB;QAEpCF,QAAQ,EAARA,QAFoC;QAGpC,iBAAiBA,QAHmB;QAIpC,sCAA+BD,UAAU,CAACE,KAAX,CAAiBC,KAAhD;MAJoC,CAA/B,CAAP;IAMD,CARK,CAAN;EAAA,CADyB,EAUzB,CAACP,QAAD,EAAWF,WAAX,EAAwBC,QAAxB,CAVyB,CAA3B;EAYA,oBAAO;IAAK,SAAS,EAAC;EAAf,GAAqDE,WAArD,CAAP;AACD,CAdD;;AAgBAJ,gBAAgB,CAACa,YAAjB,GAAgC;EAC9BX,QAAQ,EAAE,oBAAM,CAAE,CADY;EAE9BD,WAAW,EAAEa;AAFiB,CAAhC;AAKAd,gBAAgB,CAACe,SAAjB,GAA6B;EAC3B;EACAd,WAAW,EAAEF,SAAS,CAACiB,MAFI;;EAG3B;EACAd,QAAQ,EAAEH,SAAS,CAACkB,IAJO;;EAK3B;EACAd,QAAQ,EAAEJ,SAAS,CAACmB,IAAV,CAAeC;AANE,CAA7B;AASA,eAAenB,gBAAf"}