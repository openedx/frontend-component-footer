var _excluded = ["children", "className", "moreTabText", "defaultActiveKey", "activeKey"],
    _excluded2 = ["title", "notification", "tabClassName"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useEffect, useMemo, useRef } from 'react';
import BaseTabs from 'react-bootstrap/Tabs';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import TabsDeprecated from './deprecated';
import Bubble from '../Bubble';
import Dropdown from '../Dropdown';
import useIndexOfLastVisibleChild from '../hooks/useIndexOfLastVisibleChild';
import Tab from './Tab';
export var MORE_TAB_TEXT = 'More...';

var Tabs = function Tabs(_ref) {
  var _containerElementRef$, _overflowElementRef$c, _overflowElementRef$c3;

  var children = _ref.children,
      className = _ref.className,
      _ref$moreTabText = _ref.moreTabText,
      moreTabText = _ref$moreTabText === void 0 ? MORE_TAB_TEXT : _ref$moreTabText,
      defaultActiveKey = _ref.defaultActiveKey,
      activeKey = _ref.activeKey,
      props = _objectWithoutProperties(_ref, _excluded);

  var containerElementRef = useRef(null);
  var overflowElementRef = useRef(null);
  var indexOfLastVisibleChild = useIndexOfLastVisibleChild((_containerElementRef$ = containerElementRef.current) === null || _containerElementRef$ === void 0 ? void 0 : _containerElementRef$.children[0], (_overflowElementRef$c = overflowElementRef.current) === null || _overflowElementRef$c === void 0 ? void 0 : _overflowElementRef$c.parentNode);
  useEffect(function () {
    if (containerElementRef.current) {
      var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          // React-Bootstrap attribute 'data-rb-event-key' is responsible for the tab identification
          var eventKey = mutation.target.getAttribute('data-rb-event-key'); // React-Bootstrap attribute 'aria-selected' is responsible for selected/unselected state

          var isActive = mutation.target.getAttribute('aria-selected') === 'true'; // datakey attribute is added manually to the dropdown
          // elements so that they correspond to the native tabs' eventKey

          var element = containerElementRef.current.querySelector("[datakey='".concat(eventKey, "']"));
          var moreTab = containerElementRef.current.querySelector('.pgn__tab_more');

          if (isActive) {
            element === null || element === void 0 ? void 0 : element.classList.add('active'); // Here we add active class to the 'More Tab' if element exists in the dropdown

            if (element) {
              moreTab.classList.add('active');
            } else {
              moreTab.classList.remove('active');
            }
          } else {
            element === null || element === void 0 ? void 0 : element.classList.remove('active');
          }
        });
      });
      observer.observe(containerElementRef.current, {
        attributes: true,
        subtree: true,
        attributeFilter: ['aria-selected']
      });
      return function () {
        return observer.disconnect();
      };
    }

    return undefined;
  }, []);
  useEffect(function () {
    var _overflowElementRef$c2;

    if ((_overflowElementRef$c2 = overflowElementRef.current) !== null && _overflowElementRef$c2 !== void 0 && _overflowElementRef$c2.parentNode) {
      overflowElementRef.current.parentNode.tabIndex = -1;
    }
  }, [(_overflowElementRef$c3 = overflowElementRef.current) === null || _overflowElementRef$c3 === void 0 ? void 0 : _overflowElementRef$c3.parentNode]);

  var handleDropdownTabClick = function handleDropdownTabClick(eventKey) {
    var hiddenTab = containerElementRef.current.querySelector("[data-rb-event-key='".concat(eventKey, "']"));
    hiddenTab.click();
  };

  var tabsChildren = useMemo(function () {
    var indexOfOverflowStart = indexOfLastVisibleChild + 1;
    var childrenList = React.Children.map(children, function (child, index) {
      if (! /*#__PURE__*/React.isValidElement(child)) {
        return child;
      }

      var _child$props = child.props,
          title = _child$props.title,
          notification = _child$props.notification,
          tabClassName = _child$props.tabClassName,
          rest = _objectWithoutProperties(_child$props, _excluded2);

      var newTitle;

      if (notification) {
        newTitle = /*#__PURE__*/React.createElement(React.Fragment, null, title, /*#__PURE__*/React.createElement(Bubble, {
          variant: "error",
          className: "pgn__tab-notification"
        }, notification));
      } else {
        newTitle = title;
      }

      var tabClass = index > indexOfLastVisibleChild ? 'pgn__tab_invisible' : '';
      var modifiedTab = /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, rest), {}, {
        title: newTitle,
        tabClassName: classNames(tabClass, tabClassName)
      }));
      return modifiedTab;
    });
    var moreTabHasNotification = false;
    var overflowChildren = childrenList.slice(indexOfOverflowStart).map(function (overflowChild) {
      if (!moreTabHasNotification && overflowChild.props.notification) {
        moreTabHasNotification = true;
      }

      return /*#__PURE__*/React.createElement(Dropdown.Item, {
        key: "".concat(overflowChild.props.eventKey, "overflow"),
        onClick: function onClick() {
          return handleDropdownTabClick(overflowChild.props.eventKey);
        },
        disabled: overflowChild.props.disabled,
        datakey: overflowChild.props.eventKey,
        className: classNames({
          active: overflowChild.props.eventKey === defaultActiveKey || overflowChild.props.eventKey === activeKey
        }, 'pgn__tabs__dropdown-item')
      }, overflowChild.props.title);
    });
    childrenList.splice(indexOfOverflowStart, 0, /*#__PURE__*/React.createElement(Tab, {
      key: "moreTabKey",
      tabClassName: classNames(!overflowChildren.length && 'pgn__tab_invisible', 'pgn__tab_more'),
      title: /*#__PURE__*/React.createElement(Dropdown, {
        ref: overflowElementRef
      }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {
        variant: "link",
        className: "nav-link",
        id: "pgn__tab-toggle"
      }, moreTabText, moreTabHasNotification && /*#__PURE__*/React.createElement(Bubble, {
        variant: "error",
        className: "pgn__tab-notification"
      })), /*#__PURE__*/React.createElement(Dropdown.Menu, {
        className: "dropdown-menu-right"
      }, overflowChildren))
    }));
    return childrenList;
  }, [activeKey, children, defaultActiveKey, indexOfLastVisibleChild, moreTabText]);
  return /*#__PURE__*/React.createElement("div", {
    ref: containerElementRef
  }, /*#__PURE__*/React.createElement(BaseTabs, _extends({
    defaultActiveKey: defaultActiveKey,
    activeKey: activeKey
  }, props, {
    className: classNames(className, 'pgn__tabs')
  }), tabsChildren));
};

Tabs.propTypes = {
  /** Specifies elements that is processed to create tabs. */
  children: PropTypes.node.isRequired,

  /** Specifies class name to append to the base element. */
  className: PropTypes.string,

  /** Specifies text for the 'More' tab. */
  moreTabText: PropTypes.string,

  /** Specifies default active tab (uncontrolled usage). */
  defaultActiveKey: PropTypes.string,

  /** Specifies active tab (controlled usage). */
  activeKey: PropTypes.string
};
Tabs.defaultProps = {
  className: undefined,
  moreTabText: MORE_TAB_TEXT,
  defaultActiveKey: undefined,
  activeKey: undefined
};
Tabs.Deprecated = TabsDeprecated;
export default Tabs;
export { Tab };
export { default as TabContainer } from 'react-bootstrap/TabContainer';
export { default as TabContent } from 'react-bootstrap/TabContent';
export { default as TabPane } from 'react-bootstrap/TabPane';
//# sourceMappingURL=index.js.map