function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useEffect, useLayoutEffect, useState } from 'react';
import useWindowSize from './useWindowSize';
/**
 * This hook will find the index of the last child of a containing element
 * that fits within its bounding rectangle. This is done by summing the widths
 * of the children until they exceed the width of the container.
 *
 * @param {Element} containerElementRef - container element
 * @param {Element} overflowElementRef - overflow element
 *
 * The hook returns an array containing:
 * [indexOfLastVisibleChild, containerElementRef, overflowElementRef]
 *
 * indexOfLastVisibleChild - the index of the last visible child
 * containerElementRef - a ref to be added to the containing html node
 * overflowElementRef - a ref to be added to an html node inside the container
 *    that is likely to be used to contain a "More" type dropdown or other
 *    mechanism to reveal hidden children. The width of this element is always
 *    included when determining which children will fit or not. Usage of this ref
 *    is optional.
 */

var useIndexOfLastVisibleChild = function useIndexOfLastVisibleChild(containerElementRef, overflowElementRef) {
  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      containerWidth = _useState2[0],
      setContainerWidth = _useState2[1];

  var _useState3 = useState(-1),
      _useState4 = _slicedToArray(_useState3, 2),
      indexOfLastVisibleChild = _useState4[0],
      setIndexOfLastVisibleChild = _useState4[1];

  var windowSize = useWindowSize();
  useEffect(function () {
    if (containerElementRef) {
      var observer = new ResizeObserver(function (entries) {
        for (var i = 0; i < entries.length; i++) {
          setContainerWidth(entries[i].contentRect.width);
        }
      });
      observer.observe(containerElementRef);
      return function () {
        return observer.disconnect();
      };
    }

    return undefined;
  }, [containerElementRef]);
  useLayoutEffect(function () {
    if (!containerElementRef) {
      return;
    } // Get array of child nodes from NodeList form


    var childNodesArr = Array.prototype.slice.call(containerElementRef.children);

    var _childNodesArr$filter = childNodesArr // filter out the overflow element
    .filter(function (childNode) {
      return childNode !== overflowElementRef;
    }) // sum the widths to find the last visible element's index
    .reduce(function (acc, childNode, index) {
      acc.sumWidth += childNode.getBoundingClientRect().width;

      if (acc.sumWidth <= containerWidth) {
        acc.nextIndexOfLastVisibleChild = index;
      }

      return acc;
    }, {
      // Include the overflow element's width to begin with. Doing this means
      // sometimes we'll show a dropdown with one item in it when it would fit,
      // but allowing this case dramatically simplifies the calculations we need
      // to do above.
      sumWidth: overflowElementRef ? overflowElementRef.getBoundingClientRect().width : 0,
      nextIndexOfLastVisibleChild: -1
    }),
        nextIndexOfLastVisibleChild = _childNodesArr$filter.nextIndexOfLastVisibleChild;

    setIndexOfLastVisibleChild(nextIndexOfLastVisibleChild);
  }, [windowSize, containerWidth, containerElementRef, overflowElementRef]);
  return indexOfLastVisibleChild;
};

export default useIndexOfLastVisibleChild;
//# sourceMappingURL=useIndexOfLastVisibleChild.js.map