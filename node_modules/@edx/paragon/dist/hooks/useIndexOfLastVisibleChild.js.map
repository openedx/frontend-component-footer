{"version":3,"file":"useIndexOfLastVisibleChild.js","names":["useEffect","useLayoutEffect","useState","useWindowSize","useIndexOfLastVisibleChild","containerElementRef","overflowElementRef","containerWidth","setContainerWidth","indexOfLastVisibleChild","setIndexOfLastVisibleChild","windowSize","observer","ResizeObserver","entries","i","length","contentRect","width","observe","disconnect","undefined","childNodesArr","Array","prototype","slice","call","children","filter","childNode","reduce","acc","index","sumWidth","getBoundingClientRect","nextIndexOfLastVisibleChild"],"sources":["../../src/hooks/useIndexOfLastVisibleChild.jsx"],"sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\n\nimport useWindowSize from './useWindowSize';\n\n/**\n * This hook will find the index of the last child of a containing element\n * that fits within its bounding rectangle. This is done by summing the widths\n * of the children until they exceed the width of the container.\n *\n * @param {Element} containerElementRef - container element\n * @param {Element} overflowElementRef - overflow element\n *\n * The hook returns an array containing:\n * [indexOfLastVisibleChild, containerElementRef, overflowElementRef]\n *\n * indexOfLastVisibleChild - the index of the last visible child\n * containerElementRef - a ref to be added to the containing html node\n * overflowElementRef - a ref to be added to an html node inside the container\n *    that is likely to be used to contain a \"More\" type dropdown or other\n *    mechanism to reveal hidden children. The width of this element is always\n *    included when determining which children will fit or not. Usage of this ref\n *    is optional.\n */\nconst useIndexOfLastVisibleChild = (containerElementRef, overflowElementRef) => {\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [indexOfLastVisibleChild, setIndexOfLastVisibleChild] = useState(-1);\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (containerElementRef) {\n      const observer = new ResizeObserver(entries => {\n        for (let i = 0; i < entries.length; i++) {\n          setContainerWidth(entries[i].contentRect.width);\n        }\n      });\n      observer.observe(containerElementRef);\n      return () => observer.disconnect();\n    }\n    return undefined;\n  }, [containerElementRef]);\n\n  useLayoutEffect(() => {\n    if (!containerElementRef) {\n      return;\n    }\n    // Get array of child nodes from NodeList form\n    const childNodesArr = Array.prototype.slice.call(containerElementRef.children);\n    const { nextIndexOfLastVisibleChild } = childNodesArr\n      // filter out the overflow element\n      .filter(childNode => childNode !== overflowElementRef)\n      // sum the widths to find the last visible element's index\n      .reduce((acc, childNode, index) => {\n        acc.sumWidth += childNode.getBoundingClientRect().width;\n        if (acc.sumWidth <= containerWidth) {\n          acc.nextIndexOfLastVisibleChild = index;\n        }\n        return acc;\n      }, {\n        // Include the overflow element's width to begin with. Doing this means\n        // sometimes we'll show a dropdown with one item in it when it would fit,\n        // but allowing this case dramatically simplifies the calculations we need\n        // to do above.\n        sumWidth: overflowElementRef ? overflowElementRef.getBoundingClientRect().width : 0,\n        nextIndexOfLastVisibleChild: -1,\n      });\n\n    setIndexOfLastVisibleChild(nextIndexOfLastVisibleChild);\n  }, [windowSize, containerWidth, containerElementRef, overflowElementRef]);\n\n  return indexOfLastVisibleChild;\n};\n\nexport default useIndexOfLastVisibleChild;\n"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,QAArC,QAAqD,OAArD;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,mBAAD,EAAsBC,kBAAtB,EAA6C;EAC9E,gBAA4CJ,QAAQ,CAAC,CAAD,CAApD;EAAA;EAAA,IAAOK,cAAP;EAAA,IAAuBC,iBAAvB;;EACA,iBAA8DN,QAAQ,CAAC,CAAC,CAAF,CAAtE;EAAA;EAAA,IAAOO,uBAAP;EAAA,IAAgCC,0BAAhC;;EACA,IAAMC,UAAU,GAAGR,aAAa,EAAhC;EAEAH,SAAS,CAAC,YAAM;IACd,IAAIK,mBAAJ,EAAyB;MACvB,IAAMO,QAAQ,GAAG,IAAIC,cAAJ,CAAmB,UAAAC,OAAO,EAAI;QAC7C,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;UACvCP,iBAAiB,CAACM,OAAO,CAACC,CAAD,CAAP,CAAWE,WAAX,CAAuBC,KAAxB,CAAjB;QACD;MACF,CAJgB,CAAjB;MAKAN,QAAQ,CAACO,OAAT,CAAiBd,mBAAjB;MACA,OAAO;QAAA,OAAMO,QAAQ,CAACQ,UAAT,EAAN;MAAA,CAAP;IACD;;IACD,OAAOC,SAAP;EACD,CAXQ,EAWN,CAAChB,mBAAD,CAXM,CAAT;EAaAJ,eAAe,CAAC,YAAM;IACpB,IAAI,CAACI,mBAAL,EAA0B;MACxB;IACD,CAHmB,CAIpB;;;IACA,IAAMiB,aAAa,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BrB,mBAAmB,CAACsB,QAA/C,CAAtB;;IACA,4BAAwCL,aAAa,CACnD;IADmD,CAElDM,MAFqC,CAE9B,UAAAC,SAAS;MAAA,OAAIA,SAAS,KAAKvB,kBAAlB;IAAA,CAFqB,EAGtC;IAHsC,CAIrCwB,MAJqC,CAI9B,UAACC,GAAD,EAAMF,SAAN,EAAiBG,KAAjB,EAA2B;MACjCD,GAAG,CAACE,QAAJ,IAAgBJ,SAAS,CAACK,qBAAV,GAAkChB,KAAlD;;MACA,IAAIa,GAAG,CAACE,QAAJ,IAAgB1B,cAApB,EAAoC;QAClCwB,GAAG,CAACI,2BAAJ,GAAkCH,KAAlC;MACD;;MACD,OAAOD,GAAP;IACD,CAVqC,EAUnC;MACD;MACA;MACA;MACA;MACAE,QAAQ,EAAE3B,kBAAkB,GAAGA,kBAAkB,CAAC4B,qBAAnB,GAA2ChB,KAA9C,GAAsD,CALjF;MAMDiB,2BAA2B,EAAE,CAAC;IAN7B,CAVmC,CAAxC;IAAA,IAAQA,2BAAR,yBAAQA,2BAAR;;IAmBAzB,0BAA0B,CAACyB,2BAAD,CAA1B;EACD,CA1Bc,EA0BZ,CAACxB,UAAD,EAAaJ,cAAb,EAA6BF,mBAA7B,EAAkDC,kBAAlD,CA1BY,CAAf;EA4BA,OAAOG,uBAAP;AACD,CA/CD;;AAiDA,eAAeL,0BAAf"}