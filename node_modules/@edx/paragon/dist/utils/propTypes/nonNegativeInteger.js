var isNonNegativeInteger = function isNonNegativeInteger(x) {
  return typeof x === 'number' && Number.isInteger(x) && Number.isFinite(x) && x >= 0;
};

var nonNegativeInteger = function nonNegativeInteger(props, propName, componentName) {
  var value = props[propName];

  if (value == null || isNonNegativeInteger(value)) {
    return null;
  }

  return new Error("".concat(propName, " in ").concat(componentName, " must be a non-negative integer."));
};

var requiredNonNegativeNumber = function requiredNonNegativeNumber(props, propName, componentName) {
  var value = props[propName];

  if (nonNegativeInteger(value)) {
    return null;
  }

  return new Error("".concat(propName, " in ").concat(componentName, " must be a non-negative integer."));
};

nonNegativeInteger.isRequired = requiredNonNegativeNumber;
export default nonNegativeInteger;
//# sourceMappingURL=nonNegativeInteger.js.map