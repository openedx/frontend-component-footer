{"version":3,"file":"utils.js","names":["customPropTypeRequirement","targetType","conditionFn","filterString","props","propName","componentName","undefined","Error","rest","requiredWhen","propType","otherPropName","requiredWhenNot"],"sources":["../../../src/utils/propTypes/utils.js"],"sourcesContent":["/**\n * Returns the passed target PropType (targetType) if the conditionFn returns true\n * when called with the props object.\n * If the conditional is false and the associated prop is not included, raise an error,\n * giving the provided filterString as the explanation for the failure.\n * @param {func} targetType - target PropType method\n * @param {func} conditionFn - function taking the props object and returning whether or\n *   not the associated prop should be required\n * @param {string} filterString - string explanation of the isRequiredFn condition for error\n *   messages.\n * @return {func} - PropType based on targetType that is required if conditionFn returns true\n *   when called with the props object.\n */\nexport const customPropTypeRequirement = (targetType, conditionFn, filterString) => (\n  (props, propName, componentName, ...rest) => {\n    if (conditionFn(props) && props[propName] === undefined) {\n      return new Error(\n        `${componentName}: ${propName} is required when ${filterString}`,\n      );\n    }\n    return targetType(props, propName, componentName, ...rest);\n  }\n);\n\n/**\n * Returns a PropType entry with the given propType that is required if otherPropName\n * is truthy.\n * @param {func} propType - target PropType\n * @param {string} otherPropName - string name for prop that, if true, marks the\n *   associated prop as required\n * @return {func} - PropType based on propType that is required if otherPropName is\n *   set to true.\n */\nexport const requiredWhen = (propType, otherPropName) => (\n  customPropTypeRequirement(\n    propType,\n    (props) => props[otherPropName] === true,\n    `${otherPropName} is truthy`,\n  )\n);\n\n/**\n * Returns a PropType entry with the given propType that is required if otherPropName\n * is false-y.\n * @param {func} propType - target PropType\n * @param {string} otherPropName - string name for prop that, if false-y, marks the\n *   associated prop as required\n * @return {func} - PropType based on propType that is required if otherPropName is\n*    false-y\n */\nexport const requiredWhenNot = (propType, otherPropName) => (\n  customPropTypeRequirement(\n    propType,\n    (props) => !props[otherPropName],\n    `not ${otherPropName}`,\n  )\n);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,UAAD,EAAaC,WAAb,EAA0BC,YAA1B;EAAA,OACvC,UAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAA6C;IAC3C,IAAIJ,WAAW,CAACE,KAAD,CAAX,IAAsBA,KAAK,CAACC,QAAD,CAAL,KAAoBE,SAA9C,EAAyD;MACvD,OAAO,IAAIC,KAAJ,WACFF,aADE,eACgBD,QADhB,+BAC6CF,YAD7C,EAAP;IAGD;;IAL0C,kCAATM,IAAS;MAATA,IAAS;IAAA;;IAM3C,OAAOR,UAAU,MAAV,UAAWG,KAAX,EAAkBC,QAAlB,EAA4BC,aAA5B,SAA8CG,IAA9C,EAAP;EACD,CARsC;AAAA,CAAlC;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,aAAX;EAAA,OAC1BZ,yBAAyB,CACvBW,QADuB,EAEvB,UAACP,KAAD;IAAA,OAAWA,KAAK,CAACQ,aAAD,CAAL,KAAyB,IAApC;EAAA,CAFuB,YAGpBA,aAHoB,gBADC;AAAA,CAArB;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACF,QAAD,EAAWC,aAAX;EAAA,OAC7BZ,yBAAyB,CACvBW,QADuB,EAEvB,UAACP,KAAD;IAAA,OAAW,CAACA,KAAK,CAACQ,aAAD,CAAjB;EAAA,CAFuB,gBAGhBA,aAHgB,EADI;AAAA,CAAxB"}