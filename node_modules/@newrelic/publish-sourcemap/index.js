var superagent = require('superagent')

function publishSourcemap (options, cb) {
  var sourcemapPath = options.sourcemapPath
  var sourcemapUrl = options.sourcemapUrl
  var javascriptUrl = options.javascriptUrl
  var apiKey = options.apiKey || process.env.NR_API_KEY
  var releaseId = options.releaseId || process.env.RELEASE_ID
  var releaseName = options.releaseName || process.env.RELEASE_NAME
  var repoUrl = options.repoUrl || process.env.REPO_URL
  var buildCommit = options.buildCommit || process.env.BUILD_COMMIT
  var applicationId = options.applicationId || process.env.APPLICATION_ID
  var sourcemapUploadHost = options.sourcemapUploadHost || process.env.SOURCEMAP_UPLOAD_HOST || 'https://sourcemaps.service.newrelic.com'
  var sourcemapUploadPath = sourcemapUploadHost + '/v2/applications/' + applicationId + '/sourcemaps'
  var callback = cb || function () { }

  if (!sourcemapPath && !sourcemapUrl) {
    var error = new Error('Either sourcemapPath or sourcemapUrl must be provided')
    return process.nextTick(function () {
      cb(error)
    })
  }

  var request = superagent
    .post(sourcemapUploadPath)
    .field('javascriptUrl', javascriptUrl)
    .field('source', 'client-module')
    .set('Api-Key', apiKey)

  console.log('Publishing source map to New Relic Browser:', javascriptUrl)

  if (releaseName && releaseId) {
    console.log('Using release name:', releaseName, 'and release id:', releaseId)
    request = request.field('releaseName', releaseName)
    request = request.field('releaseId', releaseId)
  }

  if (repoUrl) {
    console.log('Using repository URL:', repoUrl)
    request = request.field('repoUrl', repoUrl)
  }

  if (buildCommit) {
    console.log('Using build commit hash:', buildCommit)
    request = request.field('buildCommit', buildCommit)
  }

  if (sourcemapPath) {
    sendRequest(sourcemapPath)
  } else {
    var chunks = []
    superagent
      .get(sourcemapUrl)
      .parse(sourcemapParser)
      .end(function (err, res) {
        if (err) callback(err)
      })
  }

  function sourcemapParser (res, callback) {
    if (res.statusCode < 200 || res.statusCode > 299) {
      return callback(new Error('Unexpected status code (' + res.statusCode + ') when fetching sourcemap from ' + sourcemapUrl))
    }
    res.on('data', function (chunk) {
      chunks.push(chunk)
    })
    res.on('end', function () {
      sendRequest(Buffer.concat(chunks))
    })
  }

  function sendRequest (sourcemap) {
    request
      .attach('sourcemap', sourcemap)
      .end(function (err, httpResponse) {
        if (err) return callback(err)
        if (httpResponse.statusCode < 200 || httpResponse.statusCode > 299) {
          var error = new Error()
          error.status = httpResponse.status = httpResponse.status
          error.response = httpResponse
          return callback(error)
        }
        return callback(null, httpResponse.body)
      })
  }
}

function listSourcemaps (options, cb) {
  var apiKey = options.apiKey || process.env.NR_API_KEY
  var applicationId = options.applicationId || process.env.APPLICATION_ID
  var sourcemapUploadHost = options.sourcemapUploadHost || process.env.SOURCEMAP_UPLOAD_HOST || 'https://sourcemaps.service.newrelic.com'
  var sourcemapUploadPath = sourcemapUploadHost + '/v2/applications/' + applicationId + '/sourcemaps'
  var callback = cb || function () { }
  var query = {}

  if (options.limit) query.limit = options.limit
  if (options.offset) query.offset = options.offset

  var request = superagent
    .get(sourcemapUploadPath)
    .set('Api-Key', apiKey)
    .field('source', 'client-module')
    .query(query)

  console.log('Getting source maps from', sourcemapUploadPath)

  request
    .end(function (err, httpResponse) {
      if (err) return callback(err)
      return callback(null, httpResponse.body)
    })
}

function deleteSourcemap (options, cb) {
  var apiKey = options.apiKey || process.env.NR_API_KEY
  var applicationId = options.applicationId || process.env.APPLICATION_ID
  var sourcemapId = options.sourcemapId || process.env.SOURCEMAP_ID
  var sourcemapUploadHost = options.sourcemapUploadHost || process.env.SOURCEMAP_UPLOAD_HOST || 'https://sourcemaps.service.newrelic.com'
  var sourcemapUploadPath = sourcemapUploadHost + '/v2/applications/' + applicationId + '/sourcemaps/' + sourcemapId
  var callback = cb || function () { }

  var request = superagent
    .del(sourcemapUploadPath)
    .set('Api-Key', apiKey)
    .field('source', 'client-module')

  console.log('Deleting source map from', sourcemapUploadPath)

  request
    .end(function (err, httpResponse) {
      if (err) return callback(err)
      return callback(null, httpResponse.body)
    })
}

module.exports = {
  publishSourcemap: publishSourcemap,
  deleteSourcemap: deleteSourcemap,
  listSourcemaps: listSourcemaps
}
