#!/usr/bin/env node
var publishSourcemap = require('../index').publishSourcemap

var yargs = require('yargs')
var argv = yargs
            .usage('$0 [dist/sourcefile.js.map || https://example.com/bundle.js.map] [https://example.com/bundle.js] --applicationId=[ID] --apiKey=[apiKey]')
            .describe('applicationId', 'Browser application id (APPLICATION_ID)')
            .describe('apiKey', 'New Relic personal user API key (NR_API_KEY)')
            .describe('releaseName', '[Optional] unique identifer for the release name (RELEASE_NAME)')
            .describe('releaseId', '[Optional] unique version for the release identifier (RELEASE_ID)')
            .describe('repoUrl', '[Optional] GitHub repository URL that the source map is built from (REPO_URL)')
            .describe('buildCommit', '[Optional] GitHub build commit hash that the source map is built from (BUILD_COMMIT)')
            .demandCommand(2, 'You must provide a sourcemap and the url of the published js file.')
            .argv

var sourcemapPath = argv._[0]
var javascriptUrl = argv._[1]
var sourcemapUrl = null

if (sourcemapPath.slice(0, 4) === 'http') {
  sourcemapUrl = sourcemapPath
  sourcemapPath = null
}

var options = {
  sourcemapPath: sourcemapPath,
  sourcemapUrl: sourcemapUrl,
  applicationId: argv.applicationId || process.env.APPLICATION_ID,
  javascriptUrl: javascriptUrl,
  apiKey: argv.apiKey || process.env.NR_API_KEY,
  releaseId: argv.releaseId || process.env.RELEASE_ID,
  releaseName: argv.releaseName || process.env.RELEASE_NAME,
  repoUrl: argv.repoUrl || process.env.REPO_URL,
  buildCommit: argv.buildCommit || process.env.BUILD_COMMIT,
  sourcemapUploadHost: argv.sourcemapUploadHost || process.env.SOURCEMAP_UPLOAD_HOST
}

if (!options.apiKey) exitWithError('A New Relic personal user API key is required.')
if (!options.applicationId) exitWithError('A New Relic Browser application ID is required.')

publishSourcemap(options, function (err, response) {
  if (err) {
    if (err.status) {
      console.log('Status Code', err.status)
      if (err.response) {
        console.log(err.response.text)
      }
    } else {
      console.error(err.stack)
    }
  }
})

function exitWithError (err) {
  yargs.showHelp()
  console.log(err)
  process.exit(1)
}
